#!/bin/sh -
# SPDX-License-Identifier: 0BSD
# Copyright 2023 Alexander Kozhevnikov <mentalisttraceur@gmail.com>


print_version()
{
    printf '%s\n' 'fkdep 3.0.0-alpha'
}


print_help()
{
    printf '%s\n' \
        'Create an empty .deb to fake-satisfy a package depedency.' \
        'If version is given, the created .deb has both the given' \
        'package name and version. If only package name is given,' \
        'the created .deb has a package name prefixed with "fkdep-"' \
        'and has the given package name in its "Provides" field.' \
        '' \
        'Usage:' \
        '    fkdep [--section=<section>] <package> [<version>]' \
        '    fkdep (--help | --version)' \
        '' \
        'Options:' \
        '    -h --help               show this help text' \
        '    -V --version            show version information' \
        '    -s --section=<section>  change the section of the created' \
        '                            package [default: metapackages]' \
        '' \
        'Errors:' \
        '    need package argument' \
        '    need section option argument' \
        '    bad option: <option>' \
        '    bad package name: <package>' \
        '    bad version: <version>'
}


# Wrap a file with "common format" `ar` archive headers, so that
# it can be added to the end of an `ar` archive by catenating.
# (Filenames longer than 16 characters are not supported.)
ar_add_file()
{
    filename=$1
    timestamp=$2
    size=`wc -c "$filename"` || return 1

    printf '%-16s%-12s0     0     100644  %-10s`\n' \
        "$filename" "$timestamp" "$size" || return 1

    cat "$1" || return 1

    # File entries must be 2-byte aligned, newline padded.
    case $((size % 2)) in 1)
        printf '\n' || return 1
    esac
}


case $# in 0)
    printf '%s\n' "$0: need package argument" 1>&2
    exit 1
esac


# Defaults:
section=metapackages


case $1 in
-h | --help)
    print_help || exit 1
    exit 0
;;
-V | --version)
    print_version || exit 1
    exit 0
;;
-s | --section)
    case $# in 1)
        printf '%s\n' "$0: need section option argument" 1>&2
        exit 1
    esac
    section=$2
    shift
;;
-s*)
    section=${1#-s}
;;
--section=*)
    section=${1#--section=}
;;
-*)
    printf '%s\n' "$0: bad option: $1" 1>&2
    exit 1
esac
shift


case $# in
0)
    printf '%s\n' "$0: need package argument" 1>&2
    exit 1
;;
1)
    package_provided=$1
    package_created=fkdep-$1
    version=1.0
;;
2)
    package_provided=$1
    package_created=$1
    version=$2
;;
3)
    printf '%s\n' "$0: bad extra argument: $3" 1>&2
    exit 1
esac


if ! printf %s "$package_provided" | grep -q '^[a-z0-9][a-z0-9+.-]\{1,\}$'
then
    printf '%s\n' "$0: bad package name: $package_provided" 1>&2
    exit 1
fi


# Debian has very specific version string requirements:
# https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version

# If there's an 'epoch' portion, strip it off, and allow
# colons to be matched in the upstream-revision portion.
if epoch=`printf %s "$version" | grep -o '^[0-9]\+:'`
then
    version_without_epoch=${version#"$epoch"}
    colon=:
else
    version_without_epoch=$version
    colon=
fi

# If there's a 'debian-revision' portion, strip it off, and allow
# dashes to be matched in the upstream-revision portion.
if debian_revision=`printf %s "$version_without_epoch"
                    | grep -o -- '-[a-zA-Z0-9+.~]\{1,\}$'`
then
    upstream_revision=${version_without_epoch%"$debian_revision"}
    dash=-
else
    upstream_revision=$version_without_epoch
    dash=
fi

# Finally, check the upstream-revision portion. `:` and `-` are only
# matched if their variables were filled in the prior conditionals.
if ! printf %s "$upstream_revision" \
        | grep -q '^[0-9][a-zA-Z0-9+.~'"$colon""$dash"']*$'
then
    printf '%s\n' "$0: bad version: $version" 1>&2
    exit 1
fi


workdir=`mktemp -d /tmp/fkdep.XXXXXX` || exit 1

subdir=$workdir/sub
mkdir "$subdir" || exit 1

# Using directory first, while it's blank, to generate data.tar.gz
cd "$subdir" || exit 1
tar -czf "$workdir"/data.tar.gz . || exit 1

# Now creating the files needed for control.tar.gz
cat >"$subdir"/changelog <<CHANGELOG || exit 1
$package_created ($version) unstable; urgency=low
  * Generated by fkdep!

 -- fkdep <fkdep@example.com>  `date -R`
CHANGELOG

cat >"$subdir"/control <<CONTROL || exit 1
Source: $package_created
Section: $section
Priority: extra
Maintainer: fkdep <fkdep@example.com>
Package: $package_created
Architecture: all
Version: $version
Description: Metapackage pretending to provide package $package_provided
CONTROL
case $package_created in fkdep-"$package_provided")
    printf 'Provides: %s\n' "$package_provided" >>"$subdir"/control || exit 1
esac

printf '%s\n' \
  'This is an auto-generated package, so copyright does not' \
  'apply and it is automatically in the public domain.' \
   >"$subdir"/copyright || exit 1

# Package the control files, then clean them up.
tar -czf "$workdir"/control.tar.gz . || exit 1
cd "$workdir" || exit 1
rm -r "$subdir" || exit 1

printf '2.0\n' >debian-binary || exit 1

# Build .deb, emulating the common 'ar' format
deb=${package_created}_${version}_all.deb

# Grab current timestamp
timestamp=`date +%s` || exit 1

printf '!<arch>\n' >"$deb" || exit 1
ar_add_file debian-binary "$timestamp" >>"$deb" || exit 1
ar_add_file control.tar.gz "$timestamp" >>"$deb" || exit 1
ar_add_file data.tar.gz "$timestamp" >>"$deb" || exit 1

rm data.tar.gz control.tar.gz debian-binary || exit 1

# "Return" the path to the generated .deb file
printf '%s\n' "$workdir"/"$deb"
